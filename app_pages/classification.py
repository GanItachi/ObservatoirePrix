import streamlit as st
import pandas as pd
import numpy as np
import ast
import matplotlib.pyplot as plt
from io import BytesIO
from statsmodels.tsa.seasonal import STL

# Palette couleurs (peut √™tre raffin√©e)
CLUSTER_COLORS = ["#22a879", "#e98d27", "#e5544d", "#4472c4", "#9b59b6"]


def render_classif():
    st.title("üåà Profils types des postes de consommation")
    st.markdown(
        "Obtenez une vue d'ensemble sur la dynamique des groupes de consommation‚ÄØ: "
        "hausse structurelle, saisonnalit√©, volatilit√©‚Ä¶ S√©lectionnez un groupe pour explorer un poste en d√©tail."
    )
    mapping = pd.read_csv("mapping_clusters.csv", index_col=0)
    desc_clusters = pd.read_csv("desc_clusters.csv")
    df = st.session_state.df

    for i, row in desc_clusters.iterrows():
        # Extraction robuste de la liste des postes
        try:
            postes = ast.literal_eval(row['postes'])
            if not isinstance(postes, list):
                postes = [str(postes)]
        except Exception:
            postes = [p.strip() for p in str(row['postes']).split(',') if p.strip()]

        present_cols = [col for col in postes if col in df.columns]
        missing_cols = [col for col in postes if col not in df.columns]

        cluster_color = CLUSTER_COLORS[i % len(CLUSTER_COLORS)]
        st.markdown(
            f"<h3 style='color:{cluster_color};font-weight:bold'>üü¢ {row['nom']} "
            f"<span style='font-size:0.8em'>({len(postes)} postes)</span></h3>",
            unsafe_allow_html=True
        )
        st.markdown(
            f"<div style='font-size:1.08em'><b>Description :</b> "
            f"Tendance‚ÄØ: <b>{row['trend']:.2f}</b>, "
            f"Saisonnalit√©‚ÄØ: <b>{row['season']:.2f}</b>, "
            f"Volatilit√©‚ÄØ: <b>{row['volatility']:.2f}%</b>. "
            f"Exemples‚ÄØ: {', '.join(postes[:6])}{'‚Ä¶' if len(postes) > 6 else ''}</div>",
            unsafe_allow_html=True
        )

        with st.container():
            # Recommandation synth√©tique
            if "saisonnier" in row['nom'].lower():
                st.info("üîé **Recommandation‚ÄØ:** Surveillez ces postes surtout lors des pics saisonniers.")
            elif "volatil" in row['nom'].lower():
                st.info("üö® **Recommandation‚ÄØ:** Renforcez la veille sur ces postes √† variations brusques.")
            else:
                st.success("‚ÑπÔ∏è **Recommandation‚ÄØ:** Suivi standard‚ÄØ; ces postes sont stables ou peu sensibles.")

            if present_cols:
                sub = df[present_cols]
                means = sub.mean()
                volas = sub.pct_change().std() * 100
                saison_metric = sub.groupby(sub.index.month).mean().std()
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Le plus cher (moy)", means.idxmax(), f"{means.max():.2f}")
                with col2:
                    st.metric("Le plus volatil (%)", volas.idxmax(), f"{volas.max():.2f}")
                with col3:
                    st.metric("Saisonnalit√© max.", saison_metric.idxmax(), f"{saison_metric.max():.2f}")

                # S√©lecteur interactif
                st.subheader("üîç Explorer un poste du cluster")
                poste_sel = st.selectbox("Choisissez un poste √† explorer‚ÄØ:", present_cols, key=f"poste_{i}")
                serie = df[poste_sel]
                csv_bytes = serie.to_csv().encode('utf-8')
                st.download_button(
                    label="üì• T√©l√©charger les donn√©es du poste",
                    data=csv_bytes,
                    file_name=f"{poste_sel}_series.csv",
                    mime="text/csv"
                )

                # 1Ô∏è‚É£ S√©rie s√©lectionn√©e
                fig, ax = plt.subplots(figsize=(6, 3))
                ax.plot(serie.index, serie.values, color=cluster_color, linewidth=2)
                ax.set_title(f"√âvolution de {poste_sel}")
                ax.set_xlabel('Date'); ax.set_ylabel('Indice')
                plt.xticks(rotation=45)
                st.pyplot(fig)

                buf = BytesIO(); fig.savefig(buf, format='png', bbox_inches='tight')
                st.download_button(
                    label="üì• T√©l√©charger le graphique PNG",
                    data=buf.getvalue(),
                    file_name=f"{poste_sel}_evolution.png",
                    mime="image/png"
                )

                # Calcul de l'indice moyen du cluster
                cluster_mean = sub.mean(axis=1)
                st.subheader("üìà Tendance moyenne du cluster")
                # D√©composer pour extraire la tendance
                stl = STL(cluster_mean, period=12, robust=True).fit()
                trend = stl.trend
                fig_trend, ax_trend = plt.subplots(figsize=(6, 3))
                ax_trend.plot(trend.index, trend.values, color=cluster_color, linewidth=2)
                ax_trend.set_title('Composante tendance (moyenne cluster)')
                ax_trend.set_xlabel('Date'); ax_trend.set_ylabel('Tendance')
                plt.xticks(rotation=45)
                st.pyplot(fig_trend)
                buf_tr = BytesIO(); fig_trend.savefig(buf_tr, format='png', bbox_inches='tight')
                st.download_button('üì• T√©l√©charger tendance PNG', buf_tr.getvalue(),
                                   f"{row['nom']}_tendance.png", 'image/png')

                # 2Ô∏è‚É£ Signature saisonni√®re d√©trend√©e
                st.markdown("**Signature saisonni√®re moyenne du cluster (d√©trend)**")
                seasonal = stl.seasonal
                saison_moy = seasonal.groupby(seasonal.index.month).mean()
                fig2, ax2 = plt.subplots(figsize=(6, 3))
                ax2.bar(saison_moy.index, saison_moy.values, color=cluster_color)
                ax2.set_title('Signature saisonni√®re d√©trend√©e')
                ax2.set_xlabel('Mois'); ax2.set_ylabel('Saisonnalit√©')
                plt.xticks(rotation=45)
                st.pyplot(fig2)
                buf2 = BytesIO(); fig2.savefig(buf2, format='png', bbox_inches='tight')
                st.download_button('üì• T√©l√©charger saisonni√®re PNG', buf2.getvalue(),
                                   f"{row['nom']}_saisonniere_detrend.png", 'image/png')

                # 3Ô∏è‚É£ Variations mensuelles moyennes
                st.markdown("**Variations mensuelles moyennes (%) du cluster**")
                vols_mean = cluster_mean.pct_change() * 100
                fig3, ax3 = plt.subplots(figsize=(6, 3))
                ax3.plot(vols_mean.index, vols_mean.values, color=cluster_color)
                ax3.set_title('Variations mensuelles moyennes (%)')
                ax3.set_xlabel('Date'); ax3.set_ylabel('% Variation')
                plt.xticks(rotation=45)
                st.pyplot(fig3)
                buf3 = BytesIO(); fig3.savefig(buf3, format='png', bbox_inches='tight')
                st.download_button('üì• T√©l√©charger variations PNG', buf3.getvalue(),
                                   f"{row['nom']}_variations.png", 'image/png')

            else:
                st.warning("Aucune colonne valide dans ce cluster pour la base de donn√©es actuelle.")
                
            if missing_cols:
                st.markdown(
                    f"<span style='color:#e67e22;font-size:0.95em'>Colonnes absentes‚ÄØ: {'; '.join(missing_cols)}</span>",
                    unsafe_allow_html=True
                )

        st.markdown("<hr>", unsafe_allow_html=True)

    with st.expander("‚ÑπÔ∏è Glossaire"):
        st.markdown("""
        - **Tendance‚ÄØ:** Composante de fond de la s√©rie, extraite par d√©composition STL.
        - **Saisonnalit√©‚ÄØ:** Composante cyclique apr√®s retrait de la tendance.
        - **Volatilit√©‚ÄØ:** Amplitude des variations mensuelles.
        - **CV (coefficient de variation)‚ÄØ:** Rapport de la dispersion √† la moyenne.
        """)

    st.caption(
        "Typologie calcul√©e automatiquement‚ÄØ; mise √† jour r√©guli√®re. Pour d√©tails m√©thodologiques, voir la section M√©thodologie."
    )
    
        # Lien vers la documentation d√©taill√©e
    with st.expander("üìñ En savoir plus"):
        st.markdown(
            "Ce cluster regroupe les postes dont le profil est d√©taill√© dans le m√©moire (section 4.X). "
            "Pour une description compl√®te et les recommandations associ√©es, consultez le document de r√©f√©rence."
        )
        st.markdown("[T√©l√©charger le m√©moire (PDF)](docs/memoire.pdf)")


if __name__ == "__main__":
    if "df" not in st.session_state:
        st.error("Charge la base via app.py avant d‚Äôouvrir cette page.")
    else:
        render_classif()
